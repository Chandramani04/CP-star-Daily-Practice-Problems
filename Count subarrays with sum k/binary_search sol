class Solution {
public:
    bool check(int mid, int target, vector<int>&v){
        int n = v.size();
        int sum = 0 ; 
        for(int k = 0 ; k<mid;k++){
            sum+=v[k];
        }
        if(sum>=target)return true;
        int i = 0 , j = mid -1 ;
        while(i<=j and j<n-1){
            sum-=v[i];
            i++;
            j++;
            sum+=v[j];
            if(sum>=target)return true;
        }


        return false;
    }

    int minSubArrayLen(int target, vector<int>& v) {
       int n = v.size();
       int s = 1 ; 
       int e = n ; 
       int ans = 1e6;
       while(s<=e){
           int mid = s + (e-s)/2;
           if(check(mid,target,v)){
               cout<<mid<<endl;
               ans = min(ans,mid) ; 
               e = mid -1 ;
           }
           else s = mid + 1;
       }
        if(ans==1e6){
            return 0;
        }
        return ans;
    }
};
